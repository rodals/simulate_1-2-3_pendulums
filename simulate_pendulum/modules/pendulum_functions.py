import numpy as np
####### Derivative of the Hamiltonian of the single, double and triple pendulum with respect to q and p.
# this is necessary for the double pendulum and triple to get a symplectic integrator (Stormer Verlet and Symplectic Euler)
# because the Hamiltonian is not-separable which means that the U of the system only depends from q_i and/or T of the system depends only from p_i.

## single pendulum
def single_d_q_H(q, p, t, lengths, masses, g):
    dq = np.zeros(1)
    dq[0] = masses[0]*g*lengths[0]*np.sin(q[0])
    return dq

def single_d_p_H(q, p, t, lengths, masses, g):
    dp = np.zeros(1)
    dp[0] = p[0]/(masses[0]*lengths[0]**2)
    return dp

## double pendulum
def double_d_p_H(q, p, t, lengths, masses, g):
    l1, l2 = lengths[0], lengths[1]
    m1, m2 = masses[0], masses[1]
    dp = np.zeros(2)
    (q1, q2) = q
    (p1, p2) = p

    dp[0] =  (2*l2**2*m2*p1 - 2*l1*l2*m2*p2*np.cos(q1 - q2))/(2*l1**2*l2**2*   m2*(m1 + m2 - m2*np.cos(q1 - q2)**2))
    dp[1] =  (2*l1**2*(m1 + m2)*p2 - 2*l1*l2*m2*p1*np.cos(q1 - q2))/(2*l1**2*l2**2*   m2*(m1 + m2 - m2*np.cos(q1 - q2)**2))
    return dp

def double_d_q_H(q, p, t, lengths, masses, g):
    l1, l2 = lengths[0], lengths[1]
    m1, m2 = masses[0], masses[1]
    dq = np.zeros(2)
    (q1, q2) = q
    (p1, p2) = p 

    dq[0] = g*l1*(m1 + m2)*  np.sin(q1) - (np.cos(q1 - q2)*(l2**2*m2*p1**2 + l1**2*(m1 + m2)*p2**2 -       2*l1*l2*m2*p1*p2*np.cos(q1 - q2))*np.sin(q1 - q2))/     (l1**2*l2**2*(m1 + m2 - m2*np.cos(q1 - q2)**2)**2) + (p1*p2*    np.sin(q1 - q2))/(l1*l2*(m1 + m2 - m2*np.cos(q1 - q2)**2))

    dq[1] = (np.cos(q1 - q2)*(l2**2*m2*p1**2 + l1**2*(m1 + m2)*p2**2 -       2*l1*l2*m2*p1*p2*np.cos(q1 - q2))*np.sin(q1 - q2))/     (l1**2*l2**2*(m1 + m2 - m2*np.cos(q1 - q2)**2)**2) - (p1*p2*    np.sin(q1 - q2))/(l1*l2*(m1 + m2 - m2*np.cos(q1 - q2)**2)) +  g*l2*m2*np.sin(q2)
    return dq

## triple pendulum
def triple_d_q_H(q, p, t, lengths, masses, g):
    dq = np.zeros(3)
    (q1, q2, q3) = q
    (p1, p2, p3) = p 
    l1, l2, l3 = lengths[0], lengths[1], lengths[2]
    m1, m2, m3 = masses[0], masses[1], masses[2]

    dq[0] = (2*g*l1**3*l2**2*l3**2*(3*m2**2*(m2 + m3)**3 + m1*m2*(m2 + m3)**2*(11*m2 + 4*m3) +     m1**3*(8*m2**2 + 8*m2*m3 + 3*m3**2) + m1**2*(16*m2**3 + 28*m2**2*m3 + 15*m2*m3**2 + 3*m3**3))*np.sin(q1) -   g*l1**3*l2**2*l3**2*m2**2*(m2 + m3)**2*(m1 + m2 + m3)*np.sin(3*q1 - 4*q2) +   g*l1**3*l2**2*l3**2*m1*m2**4*np.sin(5*q1 - 4*q2) + g*l1**3*l2**2*l3**2*m2**5*np.sin(5*q1 - 4*q2) +   2*g*l1**3*l2**2*l3**2*m1*m2**3*m3*np.sin(5*q1 - 4*q2) + 3*g*l1**3*l2**2*l3**2*m2**4*m3*np.sin(5*q1 - 4*q2) +   g*l1**3*l2**2*l3**2*m1*m2**2*m3**2*np.sin(5*q1 - 4*q2) + 3*g*l1**3*l2**2*l3**2*m2**3*m3**2*np.sin(5*q1 - 4*q2) +   g*l1**3*l2**2*l3**2*m2**2*m3**3*np.sin(5*q1 - 4*q2) + 8*g*l1**3*l2**2*l3**2*m1**2*m2**3*np.sin(q1 - 2*q2) +   12*g*l1**3*l2**2*l3**2*m1*m2**4*np.sin(q1 - 2*q2) + 4*g*l1**3*l2**2*l3**2*m2**5*np.sin(q1 - 2*q2) +   12*g*l1**3*l2**2*l3**2*m1**2*m2**2*m3*np.sin(q1 - 2*q2) + 28*g*l1**3*l2**2*l3**2*m1*m2**3*m3*np.sin(q1 - 2*q2) +   12*g*l1**3*l2**2*l3**2*m2**4*m3*np.sin(q1 - 2*q2) + 4*g*l1**3*l2**2*l3**2*m1**2*m2*m3**2*np.sin(q1 - 2*q2) +   20*g*l1**3*l2**2*l3**2*m1*m2**2*m3**2*np.sin(q1 - 2*q2) + 12*g*l1**3*l2**2*l3**2*m2**3*m3**2*np.sin(q1 - 2*q2) +   4*g*l1**3*l2**2*l3**2*m1*m2*m3**3*np.sin(q1 - 2*q2) + 4*g*l1**3*l2**2*l3**2*m2**2*m3**3*np.sin(q1 - 2*q2) -   8*g*l1**3*l2**2*l3**2*m1**2*m2**3*np.sin(3*q1 - 2*q2) - 12*g*l1**3*l2**2*l3**2*m1*m2**4*np.sin(3*q1 - 2*q2) -   4*g*l1**3*l2**2*l3**2*m2**5*np.sin(3*q1 - 2*q2) - 12*g*l1**3*l2**2*l3**2*m1**2*m2**2*m3*np.sin(3*q1 - 2*q2) -   28*g*l1**3*l2**2*l3**2*m1*m2**3*m3*np.sin(3*q1 - 2*q2) - 12*g*l1**3*l2**2*l3**2*m2**4*m3*np.sin(3*q1 - 2*q2) -   4*g*l1**3*l2**2*l3**2*m1**2*m2*m3**2*np.sin(3*q1 - 2*q2) - 20*g*l1**3*l2**2*l3**2*m1*m2**2*m3**2*   np.sin(3*q1 - 2*q2) - 12*g*l1**3*l2**2*l3**2*m2**3*m3**2*np.sin(3*q1 - 2*q2) -   4*g*l1**3*l2**2*l3**2*m1*m2*m3**3*np.sin(3*q1 - 2*q2) - 4*g*l1**3*l2**2*l3**2*m2**2*m3**3*np.sin(3*q1 - 2*q2) +   16*l1*l2*l3**2*m1*m2**2*p1*p2*np.sin(q1 - q2) + 20*l1*l2*l3**2*m2**3*p1*p2*np.sin(q1 - q2) +   16*l1*l2*l3**2*m1*m2*m3*p1*p2*np.sin(q1 - q2) + 30*l1*l2*l3**2*m2**2*m3*p1*p2*np.sin(q1 - q2) +   6*l1*l2*l3**2*m1*m3**2*p1*p2*np.sin(q1 - q2) + 10*l1*l2*l3**2*m2*m3**2*p1*p2*np.sin(q1 - q2) -   8*l2**2*l3**2*m2**3*p1**2*np.sin(2*(q1 - q2)) - 12*l2**2*l3**2*m2**2*m3*p1**2*np.sin(2*(q1 - q2)) -   4*l2**2*l3**2*m2*m3**2*p1**2*np.sin(2*(q1 - q2)) - 8*l1**2*l3**2*m1*m2**2*p2**2*np.sin(2*(q1 - q2)) -   8*l1**2*l3**2*m2**3*p2**2*np.sin(2*(q1 - q2)) - 8*l1**2*l3**2*m1*m2*m3*p2**2*np.sin(2*(q1 - q2)) -   12*l1**2*l3**2*m2**2*m3*p2**2*np.sin(2*(q1 - q2)) - 2*l1**2*l3**2*m1*m3**2*p2**2*np.sin(2*(q1 - q2)) -   4*l1**2*l3**2*m2*m3**2*p2**2*np.sin(2*(q1 - q2)) + 4*l1**2*l2**2*m1*m2**2*p3**2*np.sin(2*(q1 - q2)) +   8*l1**2*l2**2*m1*m2*m3*p3**2*np.sin(2*(q1 - q2)) + 4*l1**2*l2**2*m1*m3**2*p3**2*np.sin(2*(q1 - q2)) +   4*l1*l2*l3**2*m2**3*p1*p2*np.sin(3*(q1 - q2)) + 6*l1*l2*l3**2*m2**2*m3*p1*p2*np.sin(3*(q1 - q2)) +   2*l1*l2*l3**2*m2*m3**2*p1*p2*np.sin(3*(q1 - q2)) + 2*l1*l2*l3**2*m1*m3**2*p1*p2*np.sin(q1 + 3*q2 - 4*q3) +   g*l1**3*l2**2*l3**2*m1**3*m3**2*np.sin(q1 + 4*q2 - 4*q3) + g*l1**3*l2**2*l3**2*m1**2*m2*m3**2*   np.sin(q1 + 4*q2 - 4*q3) + g*l1**3*l2**2*l3**2*m1**2*m3**3*np.sin(q1 + 4*q2 - 4*q3) +   4*l1**2*l2*l3*m1*m2*m3*p2*p3*np.sin(2*q1 + q2 - 3*q3) + 4*l1**2*l2*l3*m1*m3**2*p2*p3*   np.sin(2*q1 + q2 - 3*q3) - 2*l1*l2**2*l3*m1*m2*m3*p1*p3*np.sin(q1 + 2*q2 - 3*q3) -   2*l1*l2**2*l3*m1*m3**2*p1*p3*np.sin(q1 + 2*q2 - 3*q3) - 2*g*l1**3*l2**2*l3**2*m1**2*m2**2*m3*   np.sin(q1 - 2*q3) - 2*g*l1**3*l2**2*l3**2*m1*m2**3*m3*np.sin(q1 - 2*q3) -   2*g*l1**3*l2**2*l3**2*m1**2*m2*m3**2*np.sin(q1 - 2*q3) - 4*g*l1**3*l2**2*l3**2*m1*m2**2*m3**2*np.sin(q1 - 2*q3) -   2*g*l1**3*l2**2*l3**2*m1*m2*m3**3*np.sin(q1 - 2*q3) + 2*g*l1**3*l2**2*l3**2*m1**2*m2**2*m3*np.sin(3*q1 - 2*q3) +   2*g*l1**3*l2**2*l3**2*m1*m2**3*m3*np.sin(3*q1 - 2*q3) + 2*g*l1**3*l2**2*l3**2*m1**2*m2*m3**2*   np.sin(3*q1 - 2*q3) + 4*g*l1**3*l2**2*l3**2*m1*m2**2*m3**2*np.sin(3*q1 - 2*q3) +   2*g*l1**3*l2**2*l3**2*m1*m2*m3**3*np.sin(3*q1 - 2*q3) - 2*l1*l2*l3**2*m2**2*m3*p1*p2*   np.sin(3*q1 - q2 - 2*q3) - 2*l1*l2*l3**2*m2*m3**2*p1*p2*np.sin(3*q1 - q2 - 2*q3) -   12*l1*l2*l3**2*m1*m2*m3*p1*p2*np.sin(q1 + q2 - 2*q3) - 4*l1*l2*l3**2*m2**2*m3*p1*p2*   np.sin(q1 + q2 - 2*q3) - 6*l1*l2*l3**2*m1*m3**2*p1*p2*np.sin(q1 + q2 - 2*q3) -   4*l1*l2*l3**2*m2*m3**2*p1*p2*np.sin(q1 + q2 - 2*q3) - 2*l1**2*l3**2*m1*m3**2*p2**2*   np.sin(2*(q1 + q2 - 2*q3)) - 8*g*l1**3*l2**2*l3**2*m1**3*m2*m3*np.sin(q1 + 2*q2 - 2*q3) -   12*g*l1**3*l2**2*l3**2*m1**2*m2**2*m3*np.sin(q1 + 2*q2 - 2*q3) - 4*g*l1**3*l2**2*l3**2*m1*m2**3*m3*   np.sin(q1 + 2*q2 - 2*q3) - 4*g*l1**3*l2**2*l3**2*m1**3*m3**2*np.sin(q1 + 2*q2 - 2*q3) -   16*g*l1**3*l2**2*l3**2*m1**2*m2*m3**2*np.sin(q1 + 2*q2 - 2*q3) - 8*g*l1**3*l2**2*l3**2*m1*m2**2*m3**2*   np.sin(q1 + 2*q2 - 2*q3) - 4*g*l1**3*l2**2*l3**2*m1**2*m3**3*np.sin(q1 + 2*q2 - 2*q3) -   4*g*l1**3*l2**2*l3**2*m1*m2*m3**3*np.sin(q1 + 2*q2 - 2*q3) + 8*l1*l2**2*l3*m1*m2**2*p1*p3*np.sin(q1 - q3) -   2*l1*l2**2*l3*m2**3*p1*p3*np.sin(q1 - q3) + 14*l1*l2**2*l3*m1*m2*m3*p1*p3*np.sin(q1 - q3) -   4*l1*l2**2*l3*m2**2*m3*p1*p3*np.sin(q1 - q3) + 6*l1*l2**2*l3*m1*m3**2*p1*p3*np.sin(q1 - q3) -   2*l1*l2**2*l3*m2*m3**2*p1*p3*np.sin(q1 - q3) + 2*l2**2*l3**2*m2**2*m3*p1**2*np.sin(2*(q1 - q3)) +   2*l2**2*l3**2*m2*m3**2*p1**2*np.sin(2*(q1 - q3)) + 8*l1**2*l3**2*m1*m2*m3*p2**2*np.sin(2*(q1 - q3)) +   4*l1**2*l3**2*m2**2*m3*p2**2*np.sin(2*(q1 - q3)) + 4*l1**2*l3**2*m1*m3**2*p2**2*np.sin(2*(q1 - q3)) +   4*l1**2*l3**2*m2*m3**2*p2**2*np.sin(2*(q1 - q3)) - 2*l1**2*l2**2*m1*m2**2*p3**2*np.sin(2*(q1 - q3)) -   4*l1**2*l2**2*m1*m2*m3*p3**2*np.sin(2*(q1 - q3)) - 2*l1**2*l2**2*m1*m3**2*p3**2*np.sin(2*(q1 - q3)) +   2*l1*l2**2*l3*m2**3*p1*p3*np.sin(3*q1 - 2*q2 - q3) + 4*l1*l2**2*l3*m2**2*m3*p1*p3*   np.sin(3*q1 - 2*q2 - q3) + 2*l1*l2**2*l3*m2*m3**2*p1*p3*np.sin(3*q1 - 2*q2 - q3) -   8*l1**2*l2*l3*m1*m2**2*p2*p3*np.sin(2*q1 - q2 - q3) - 4*l1**2*l2*l3*m2**3*p2*p3*np.sin(2*q1 - q2 - q3) -   16*l1**2*l2*l3*m1*m2*m3*p2*p3*np.sin(2*q1 - q2 - q3) - 8*l1**2*l2*l3*m2**2*m3*p2*p3*   np.sin(2*q1 - q2 - q3) - 8*l1**2*l2*l3*m1*m3**2*p2*p3*np.sin(2*q1 - q2 - q3) -   4*l1**2*l2*l3*m2*m3**2*p2*p3*np.sin(2*q1 - q2 - q3) + 8*l1**2*l2*l3*m2**3*p2*p3*np.sin(q2 - q3) +   16*l1**2*l2*l3*m2**2*m3*p2*p3*np.sin(q2 - q3) + 8*l1**2*l2*l3*m2*m3**2*p2*p3*np.sin(q2 - q3) -   4*l1**2*l3**2*m2**2*m3*p2**2*np.sin(2*(q2 - q3)) - 4*l1**2*l3**2*m2*m3**2*p2**2*np.sin(2*(q2 - q3)) -   2*l1*l2**2*l3*m2**3*p1*p3*np.sin(3*q1 - 4*q2 + q3) - 4*l1*l2**2*l3*m2**2*m3*p1*p3*   np.sin(3*q1 - 4*q2 + q3) - 2*l1*l2**2*l3*m2*m3**2*p1*p3*np.sin(3*q1 - 4*q2 + q3) +   8*l1**2*l2*l3*m1*m2**2*p2*p3*np.sin(2*q1 - 3*q2 + q3) + 4*l1**2*l2*l3*m2**3*p2*p3*   np.sin(2*q1 - 3*q2 + q3) + 12*l1**2*l2*l3*m1*m2*m3*p2*p3*np.sin(2*q1 - 3*q2 + q3) +   8*l1**2*l2*l3*m2**2*m3*p2*p3*np.sin(2*q1 - 3*q2 + q3) + 4*l1**2*l2*l3*m1*m3**2*p2*p3*   np.sin(2*q1 - 3*q2 + q3) + 4*l1**2*l2*l3*m2*m3**2*p2*p3*np.sin(2*q1 - 3*q2 + q3) -   8*l1*l2**2*l3*m1*m2**2*p1*p3*np.sin(q1 - 2*q2 + q3) + 2*l1*l2**2*l3*m2**3*p1*p3*np.sin(q1 - 2*q2 + q3) -   14*l1*l2**2*l3*m1*m2*m3*p1*p3*np.sin(q1 - 2*q2 + q3) + 4*l1*l2**2*l3*m2**2*m3*p1*p3*   np.sin(q1 - 2*q2 + q3) - 6*l1*l2**2*l3*m1*m3**2*p1*p3*np.sin(q1 - 2*q2 + q3) +   2*l1*l2**2*l3*m2*m3**2*p1*p3*np.sin(q1 - 2*q2 + q3) + 2*l2**2*l3**2*m2**2*m3*p1**2*   np.sin(2*(q1 - 2*q2 + q3)) + 2*l2**2*l3**2*m2*m3**2*p1**2*np.sin(2*(q1 - 2*q2 + q3)) -   2*l1**2*l2**2*m1*m2**2*p3**2*np.sin(2*(q1 - 2*q2 + q3)) - 4*l1**2*l2**2*m1*m2*m3*p3**2*   np.sin(2*(q1 - 2*q2 + q3)) - 2*l1**2*l2**2*m1*m3**2*p3**2*np.sin(2*(q1 - 2*q2 + q3)) -   2*g*l1**3*l2**2*l3**2*m1**2*m2**2*m3*np.sin(q1 - 4*q2 + 2*q3) - 2*g*l1**3*l2**2*l3**2*m1*m2**3*m3*   np.sin(q1 - 4*q2 + 2*q3) - 2*g*l1**3*l2**2*l3**2*m1**2*m2*m3**2*np.sin(q1 - 4*q2 + 2*q3) -   4*g*l1**3*l2**2*l3**2*m1*m2**2*m3**2*np.sin(q1 - 4*q2 + 2*q3) - 2*g*l1**3*l2**2*l3**2*m1*m2*m3**3*   np.sin(q1 - 4*q2 + 2*q3) + 2*g*l1**3*l2**2*l3**2*m1**2*m2**2*m3*np.sin(3*q1 - 4*q2 + 2*q3) +   2*g*l1**3*l2**2*l3**2*m1*m2**3*m3*np.sin(3*q1 - 4*q2 + 2*q3) + 2*g*l1**3*l2**2*l3**2*m1**2*m2*m3**2*   np.sin(3*q1 - 4*q2 + 2*q3) + 4*g*l1**3*l2**2*l3**2*m1*m2**2*m3**2*np.sin(3*q1 - 4*q2 + 2*q3) +   2*g*l1**3*l2**2*l3**2*m1*m2*m3**3*np.sin(3*q1 - 4*q2 + 2*q3) - 4*l1*l2*l3**2*m1*m2*m3*p1*p2*   np.sin(q1 - 3*q2 + 2*q3) - 6*l1*l2*l3**2*m2**2*m3*p1*p2*np.sin(q1 - 3*q2 + 2*q3) -   2*l1*l2*l3**2*m1*m3**2*p1*p2*np.sin(q1 - 3*q2 + 2*q3) - 6*l1*l2*l3**2*m2*m3**2*p1*p2*   np.sin(q1 - 3*q2 + 2*q3) - 8*g*l1**3*l2**2*l3**2*m1**3*m2*m3*np.sin(q1 - 2*q2 + 2*q3) -   12*g*l1**3*l2**2*l3**2*m1**2*m2**2*m3*np.sin(q1 - 2*q2 + 2*q3) - 4*g*l1**3*l2**2*l3**2*m1*m2**3*m3*   np.sin(q1 - 2*q2 + 2*q3) - 4*g*l1**3*l2**2*l3**2*m1**3*m3**2*np.sin(q1 - 2*q2 + 2*q3) -   16*g*l1**3*l2**2*l3**2*m1**2*m2*m3**2*np.sin(q1 - 2*q2 + 2*q3) - 8*g*l1**3*l2**2*l3**2*m1*m2**2*m3**2*   np.sin(q1 - 2*q2 + 2*q3) - 4*g*l1**3*l2**2*l3**2*m1**2*m3**3*np.sin(q1 - 2*q2 + 2*q3) -   4*g*l1**3*l2**2*l3**2*m1*m2*m3**3*np.sin(q1 - 2*q2 + 2*q3) + 2*l1*l2**2*l3*m1*m2*m3*p1*p3*   np.sin(q1 - 4*q2 + 3*q3) + 2*l1*l2**2*l3*m1*m3**2*p1*p3*np.sin(q1 - 4*q2 + 3*q3) +   g*l1**3*l2**2*l3**2*m1**3*m3**2*np.sin(q1 - 4*q2 + 4*q3) + g*l1**3*l2**2*l3**2*m1**2*m2*m3**2*   np.sin(q1 - 4*q2 + 4*q3) + g*l1**3*l2**2*l3**2*m1**2*m3**3*np.sin(q1 - 4*q2 + 4*q3))/ (4*l1**2*l2**2*l3**2*(2*m1*m2 + m2**2 + m1*m3 + m2*m3 - m2*(m2 + m3)*np.cos(2*(q1 - q2)) -     m1*m3*np.cos(2*(q2 - q3)))**2) 
    dq[1] =  (-(g*l1**2*l2**3*l3**2*m2**2*(m2 + m3)**3*np.sin(4*q1 - 5*q2)) + 4*g*l1**2*l2**3*l3**2*m2*(m2 + m3)**2*   (m2*(m2 + m3) + m1*(2*m2 + m3))*np.sin(2*q1 - 3*q2) + g*l1**2*l2**3*l3**2*m2**5*np.sin(4*q1 - 3*q2) +   3*g*l1**2*l2**3*l3**2*m2**4*m3*np.sin(4*q1 - 3*q2) + 3*g*l1**2*l2**3*l3**2*m2**3*m3**2*np.sin(4*q1 - 3*q2) +   g*l1**2*l2**3*l3**2*m2**2*m3**3*np.sin(4*q1 - 3*q2) - 16*l1*l2*l3**2*m1*m2**2*p1*p2*np.sin(q1 - q2) -   20*l1*l2*l3**2*m2**3*p1*p2*np.sin(q1 - q2) - 16*l1*l2*l3**2*m1*m2*m3*p1*p2*np.sin(q1 - q2) -   30*l1*l2*l3**2*m2**2*m3*p1*p2*np.sin(q1 - q2) + 2*l1*l2*l3**2*m1*m3**2*p1*p2*np.sin(q1 - q2) -   10*l1*l2*l3**2*m2*m3**2*p1*p2*np.sin(q1 - q2) + 8*l2**2*l3**2*m2**3*p1**2*np.sin(2*(q1 - q2)) +   12*l2**2*l3**2*m2**2*m3*p1**2*np.sin(2*(q1 - q2)) + 4*l2**2*l3**2*m2*m3**2*p1**2*np.sin(2*(q1 - q2)) +   8*l1**2*l3**2*m1*m2**2*p2**2*np.sin(2*(q1 - q2)) + 8*l1**2*l3**2*m2**3*p2**2*np.sin(2*(q1 - q2)) +   8*l1**2*l3**2*m1*m2*m3*p2**2*np.sin(2*(q1 - q2)) + 12*l1**2*l3**2*m2**2*m3*p2**2*np.sin(2*(q1 - q2)) -   2*l1**2*l3**2*m1*m3**2*p2**2*np.sin(2*(q1 - q2)) + 4*l1**2*l3**2*m2*m3**2*p2**2*np.sin(2*(q1 - q2)) -   4*l1**2*l2**2*m1*m2**2*p3**2*np.sin(2*(q1 - q2)) - 8*l1**2*l2**2*m1*m2*m3*p3**2*np.sin(2*(q1 - q2)) -   4*l1**2*l2**2*m1*m3**2*p3**2*np.sin(2*(q1 - q2)) - 4*l1*l2*l3**2*m2**3*p1*p2*np.sin(3*(q1 - q2)) -   6*l1*l2*l3**2*m2**2*m3*p1*p2*np.sin(3*(q1 - q2)) - 2*l1*l2*l3**2*m2*m3**2*p1*p2*np.sin(3*(q1 - q2)) -   8*g*l1**2*l2**3*l3**2*m1*m2**4*np.sin(2*q1 - q2) - 4*g*l1**2*l2**3*l3**2*m2**5*np.sin(2*q1 - q2) -   20*g*l1**2*l2**3*l3**2*m1*m2**3*m3*np.sin(2*q1 - q2) - 12*g*l1**2*l2**3*l3**2*m2**4*m3*np.sin(2*q1 - q2) -   16*g*l1**2*l2**3*l3**2*m1*m2**2*m3**2*np.sin(2*q1 - q2) - 12*g*l1**2*l2**3*l3**2*m2**3*m3**2*np.sin(2*q1 - q2) -   4*g*l1**2*l2**3*l3**2*m1*m2*m3**3*np.sin(2*q1 - q2) - 4*g*l1**2*l2**3*l3**2*m2**2*m3**3*np.sin(2*q1 - q2) +   16*g*l1**2*l2**3*l3**2*m1**2*m2**3*np.sin(q2) + 16*g*l1**2*l2**3*l3**2*m1*m2**4*np.sin(q2) +   6*g*l1**2*l2**3*l3**2*m2**5*np.sin(q2) + 32*g*l1**2*l2**3*l3**2*m1**2*m2**2*m3*np.sin(q2) +   40*g*l1**2*l2**3*l3**2*m1*m2**3*m3*np.sin(q2) + 18*g*l1**2*l2**3*l3**2*m2**4*m3*np.sin(q2) +   22*g*l1**2*l2**3*l3**2*m1**2*m2*m3**2*np.sin(q2) + 32*g*l1**2*l2**3*l3**2*m1*m2**2*m3**2*np.sin(q2) +   18*g*l1**2*l2**3*l3**2*m2**3*m3**2*np.sin(q2) + 6*g*l1**2*l2**3*l3**2*m1**2*m3**3*np.sin(q2) +   8*g*l1**2*l2**3*l3**2*m1*m2*m3**3*np.sin(q2) + 6*g*l1**2*l2**3*l3**2*m2**2*m3**3*np.sin(q2) -   g*l1**2*l2**3*l3**2*m1**2*m2*m3**2*np.sin(3*q2 - 4*q3) - g*l1**2*l2**3*l3**2*m1**2*m3**3*np.sin(3*q2 - 4*q3) -   2*l1*l2*l3**2*m1*m3**2*p1*p2*np.sin(q1 + 3*q2 - 4*q3) + g*l1**2*l2**3*l3**2*m1**2*m2*m3**2*   np.sin(5*q2 - 4*q3) + g*l1**2*l2**3*l3**2*m1**2*m3**3*np.sin(5*q2 - 4*q3) -   6*l1**2*l2*l3*m1*m2*m3*p2*p3*np.sin(2*q1 + q2 - 3*q3) - 6*l1**2*l2*l3*m1*m3**2*p2*p3*   np.sin(2*q1 + q2 - 3*q3) + 4*l1*l2**2*l3*m1*m2*m3*p1*p3*np.sin(q1 + 2*q2 - 3*q3) +   4*l1*l2**2*l3*m1*m3**2*p1*p3*np.sin(q1 + 2*q2 - 3*q3) - 2*g*l1**2*l2**3*l3**2*m1*m2**3*m3*   np.sin(2*q1 - q2 - 2*q3) - 4*g*l1**2*l2**3*l3**2*m1*m2**2*m3**2*np.sin(2*q1 - q2 - 2*q3) -   2*g*l1**2*l2**3*l3**2*m1*m2*m3**3*np.sin(2*q1 - q2 - 2*q3) + 6*l1*l2*l3**2*m2**2*m3*p1*p2*   np.sin(3*q1 - q2 - 2*q3) + 6*l1*l2*l3**2*m2*m3**2*p1*p2*np.sin(3*q1 - q2 - 2*q3) +   8*g*l1**2*l2**3*l3**2*m1**2*m2**2*m3*np.sin(q2 - 2*q3) + 4*g*l1**2*l2**3*l3**2*m1*m2**3*m3*np.sin(q2 - 2*q3) +   12*g*l1**2*l2**3*l3**2*m1**2*m2*m3**2*np.sin(q2 - 2*q3) + 8*g*l1**2*l2**3*l3**2*m1*m2**2*m3**2*   np.sin(q2 - 2*q3) + 4*g*l1**2*l2**3*l3**2*m1**2*m3**3*np.sin(q2 - 2*q3) +   4*g*l1**2*l2**3*l3**2*m1*m2*m3**3*np.sin(q2 - 2*q3) + 4*l1*l2*l3**2*m1*m2*m3*p1*p2*np.sin(q1 + q2 - 2*q3) -   4*l1*l2*l3**2*m2**2*m3*p1*p2*np.sin(q1 + q2 - 2*q3) + 2*l1*l2*l3**2*m1*m3**2*p1*p2*np.sin(q1 + q2 - 2*q3) -   4*l1*l2*l3**2*m2*m3**2*p1*p2*np.sin(q1 + q2 - 2*q3) + 2*l1**2*l3**2*m1*m3**2*p2**2*   np.sin(2*(q1 + q2 - 2*q3)) + 2*g*l1**2*l2**3*l3**2*m1*m2**3*m3*np.sin(2*q1 + q2 - 2*q3) +   4*g*l1**2*l2**3*l3**2*m1*m2**2*m3**2*np.sin(2*q1 + q2 - 2*q3) + 2*g*l1**2*l2**3*l3**2*m1*m2*m3**3*   np.sin(2*q1 + q2 - 2*q3) - 8*g*l1**2*l2**3*l3**2*m1**2*m2**2*m3*np.sin(3*q2 - 2*q3) -   4*g*l1**2*l2**3*l3**2*m1*m2**3*m3*np.sin(3*q2 - 2*q3) - 12*g*l1**2*l2**3*l3**2*m1**2*m2*m3**2*   np.sin(3*q2 - 2*q3) - 8*g*l1**2*l2**3*l3**2*m1*m2**2*m3**2*np.sin(3*q2 - 2*q3) -   4*g*l1**2*l2**3*l3**2*m1**2*m3**3*np.sin(3*q2 - 2*q3) - 4*g*l1**2*l2**3*l3**2*m1*m2*m3**3*np.sin(3*q2 - 2*q3) +   8*l1*l2**2*l3*m2**3*p1*p3*np.sin(q1 - q3) - 8*l1*l2**2*l3*m1*m2*m3*p1*p3*np.sin(q1 - q3) +   16*l1*l2**2*l3*m2**2*m3*p1*p3*np.sin(q1 - q3) - 8*l1*l2**2*l3*m1*m3**2*p1*p3*np.sin(q1 - q3) +   8*l1*l2**2*l3*m2*m3**2*p1*p3*np.sin(q1 - q3) - 4*l2**2*l3**2*m2**2*m3*p1**2*np.sin(2*(q1 - q3)) -   4*l2**2*l3**2*m2*m3**2*p1**2*np.sin(2*(q1 - q3)) + 4*l1**2*l2**2*m1*m2**2*p3**2*np.sin(2*(q1 - q3)) +   8*l1**2*l2**2*m1*m2*m3*p3**2*np.sin(2*(q1 - q3)) + 4*l1**2*l2**2*m1*m3**2*p3**2*np.sin(2*(q1 - q3)) +   2*l1**2*l2*l3*m2**3*p2*p3*np.sin(4*q1 - 3*q2 - q3) + 4*l1**2*l2*l3*m2**2*m3*p2*p3*   np.sin(4*q1 - 3*q2 - q3) + 2*l1**2*l2*l3*m2*m3**2*p2*p3*np.sin(4*q1 - 3*q2 - q3) -   4*l1*l2**2*l3*m2**3*p1*p3*np.sin(3*q1 - 2*q2 - q3) - 8*l1*l2**2*l3*m2**2*m3*p1*p3*   np.sin(3*q1 - 2*q2 - q3) - 4*l1*l2**2*l3*m2*m3**2*p1*p3*np.sin(3*q1 - 2*q2 - q3) -   4*l1**2*l2*l3*m1*m2**2*p2*p3*np.sin(2*q1 - q2 - q3) - 2*l1**2*l2*l3*m2**3*p2*p3*np.sin(2*q1 - q2 - q3) -   4*l1**2*l2*l3*m2**2*m3*p2*p3*np.sin(2*q1 - q2 - q3) + 4*l1**2*l2*l3*m1*m3**2*p2*p3*np.sin(2*q1 - q2 - q3) -   2*l1**2*l2*l3*m2*m3**2*p2*p3*np.sin(2*q1 - q2 - q3) + 16*l1**2*l2*l3*m1**2*m2*p2*p3*np.sin(q2 - q3) +   16*l1**2*l2*l3*m1*m2**2*p2*p3*np.sin(q2 - q3) - 2*l1**2*l2*l3*m2**3*p2*p3*np.sin(q2 - q3) +   20*l1**2*l2*l3*m1**2*m3*p2*p3*np.sin(q2 - q3) + 26*l1**2*l2*l3*m1*m2*m3*p2*p3*np.sin(q2 - q3) -   4*l1**2*l2*l3*m2**2*m3*p2*p3*np.sin(q2 - q3) + 10*l1**2*l2*l3*m1*m3**2*p2*p3*np.sin(q2 - q3) -   2*l1**2*l2*l3*m2*m3**2*p2*p3*np.sin(q2 - q3) + 4*l2**2*l3**2*m2**2*m3*p1**2*np.sin(2*(q2 - q3)) +   4*l2**2*l3**2*m2*m3**2*p1**2*np.sin(2*(q2 - q3)) - 8*l1**2*l3**2*m1**2*m3*p2**2*np.sin(2*(q2 - q3)) -   8*l1**2*l3**2*m1*m2*m3*p2**2*np.sin(2*(q2 - q3)) + 2*l1**2*l3**2*m2**2*m3*p2**2*np.sin(2*(q2 - q3)) -   4*l1**2*l3**2*m1*m3**2*p2**2*np.sin(2*(q2 - q3)) + 2*l1**2*l3**2*m2*m3**2*p2**2*np.sin(2*(q2 - q3)) -   8*l1**2*l2**2*m1**2*m2*p3**2*np.sin(2*(q2 - q3)) - 4*l1**2*l2**2*m1*m2**2*p3**2*np.sin(2*(q2 - q3)) -   8*l1**2*l2**2*m1**2*m3*p3**2*np.sin(2*(q2 - q3)) - 8*l1**2*l2**2*m1*m2*m3*p3**2*np.sin(2*(q2 - q3)) -   4*l1**2*l2**2*m1*m3**2*p3**2*np.sin(2*(q2 - q3)) + 4*l1**2*l2*l3*m1**2*m3*p2*p3*np.sin(3*(q2 - q3)) +   2*l1**2*l2*l3*m1*m2*m3*p2*p3*np.sin(3*(q2 - q3)) + 2*l1**2*l2*l3*m1*m3**2*p2*p3*np.sin(3*(q2 - q3)) -   4*l1**2*l2*l3*m1*m2**2*p2*p3*np.sin(2*q1 - 3*q2 + q3) - 2*l1**2*l2*l3*m2**3*p2*p3*   np.sin(2*q1 - 3*q2 + q3) - 2*l1**2*l2*l3*m1*m2*m3*p2*p3*np.sin(2*q1 - 3*q2 + q3) -   4*l1**2*l2*l3*m2**2*m3*p2*p3*np.sin(2*q1 - 3*q2 + q3) + 2*l1**2*l2*l3*m1*m3**2*p2*p3*   np.sin(2*q1 - 3*q2 + q3) - 2*l1**2*l2*l3*m2*m3**2*p2*p3*np.sin(2*q1 - 3*q2 + q3) +   16*l1*l2**2*l3*m1*m2**2*p1*p3*np.sin(q1 - 2*q2 + q3) + 4*l1*l2**2*l3*m2**3*p1*p3*np.sin(q1 - 2*q2 + q3) +   20*l1*l2**2*l3*m1*m2*m3*p1*p3*np.sin(q1 - 2*q2 + q3) + 8*l1*l2**2*l3*m2**2*m3*p1*p3*   np.sin(q1 - 2*q2 + q3) + 4*l1*l2**2*l3*m1*m3**2*p1*p3*np.sin(q1 - 2*q2 + q3) +   4*l1*l2**2*l3*m2*m3**2*p1*p3*np.sin(q1 - 2*q2 + q3) - 2*g*l1**2*l2**3*l3**2*m1*m2**3*m3*   np.sin(2*q1 - 5*q2 + 2*q3) - 4*g*l1**2*l2**3*l3**2*m1*m2**2*m3**2*np.sin(2*q1 - 5*q2 + 2*q3) -   2*g*l1**2*l2**3*l3**2*m1*m2*m3**3*np.sin(2*q1 - 5*q2 + 2*q3) - 4*l1*l2*l3**2*m1*m2*m3*p1*p2*   np.sin(q1 - 3*q2 + 2*q3) + 2*l1*l2*l3**2*m2**2*m3*p1*p2*np.sin(q1 - 3*q2 + 2*q3) -   2*l1*l2*l3**2*m1*m3**2*p1*p2*np.sin(q1 - 3*q2 + 2*q3) + 2*l1*l2*l3**2*m2*m3**2*p1*p2*   np.sin(q1 - 3*q2 + 2*q3) + 2*g*l1**2*l2**3*l3**2*m1*m2**3*m3*np.sin(2*q1 - 3*q2 + 2*q3) +   4*g*l1**2*l2**3*l3**2*m1*m2**2*m3**2*np.sin(2*q1 - 3*q2 + 2*q3) +   2*g*l1**2*l2**3*l3**2*m1*m2*m3**3*np.sin(2*q1 - 3*q2 + 2*q3) -   2*l1**2*l3**2*m2**2*m3*p2**2*np.sin(4*q1 - 2*(q2 + q3)) - 2*l1**2*l3**2*m2*m3**2*p2**2*   np.sin(4*q1 - 2*(q2 + q3)))/(4*l1**2*l2**2*l3**2*  (2*m1*m2 + m2**2 + m1*m3 + m2*m3 - m2*(m2 + m3)*np.cos(2*(q1 - q2)) - m1*m3*np.cos(2*(q2 - q3)))**2)
    dq[2] = (-8*l1*l2*l3**2*m1*m3**2*p1*p2*np.sin(q1 - q2) + 4*l1**2*l3**2*m1*m3**2*p2**2*np.sin(2*(q1 - q2)) -   g*l1**2*l2**2*l3**3*m1**2*m3**3*np.sin(4*q2 - 5*q3) - 2*g*l1**2*l2**2*l3**3*m1*m2**2*m3**2*np.sin(2*q1 - 3*q3) -   2*g*l1**2*l2**2*l3**3*m1*m2*m3**3*np.sin(2*q1 - 3*q3) + 2*l1**2*l2*l3*m1*m2*m3*p2*p3*   np.sin(2*q1 + q2 - 3*q3) + 2*l1**2*l2*l3*m1*m3**2*p2*p3*np.sin(2*q1 + q2 - 3*q3) +   8*g*l1**2*l2**2*l3**3*m1**2*m2*m3**2*np.sin(2*q2 - 3*q3) + 4*g*l1**2*l2**2*l3**3*m1*m2**2*m3**2*   np.sin(2*q2 - 3*q3) + 4*g*l1**2*l2**2*l3**3*m1**2*m3**3*np.sin(2*q2 - 3*q3) +   4*g*l1**2*l2**2*l3**3*m1*m2*m3**3*np.sin(2*q2 - 3*q3) - 2*l1*l2**2*l3*m1*m2*m3*p1*p3*   np.sin(q1 + 2*q2 - 3*q3) - 2*l1*l2**2*l3*m1*m3**2*p1*p3*np.sin(q1 + 2*q2 - 3*q3) +   g*l1**2*l2**2*l3**3*m1**2*m3**3*np.sin(4*q2 - 3*q3) - 4*l1*l2*l3**2*m2**2*m3*p1*p2*np.sin(3*q1 - q2 - 2*q3) -   4*l1*l2*l3**2*m2*m3**2*p1*p2*np.sin(3*q1 - q2 - 2*q3) + 8*l1*l2*l3**2*m1*m2*m3*p1*p2*   np.sin(q1 + q2 - 2*q3) + 8*l1*l2*l3**2*m2**2*m3*p1*p2*np.sin(q1 + q2 - 2*q3) +   4*l1*l2*l3**2*m1*m3**2*p1*p2*np.sin(q1 + q2 - 2*q3) + 8*l1*l2*l3**2*m2*m3**2*p1*p2*np.sin(q1 + q2 - 2*q3) -   8*l1*l2**2*l3*m1*m2**2*p1*p3*np.sin(q1 - q3) - 6*l1*l2**2*l3*m2**3*p1*p3*np.sin(q1 - q3) -   6*l1*l2**2*l3*m1*m2*m3*p1*p3*np.sin(q1 - q3) - 12*l1*l2**2*l3*m2**2*m3*p1*p3*np.sin(q1 - q3) +   2*l1*l2**2*l3*m1*m3**2*p1*p3*np.sin(q1 - q3) - 6*l1*l2**2*l3*m2*m3**2*p1*p3*np.sin(q1 - q3) +   2*l2**2*l3**2*m2**2*m3*p1**2*np.sin(2*(q1 - q3)) + 2*l2**2*l3**2*m2*m3**2*p1**2*np.sin(2*(q1 - q3)) -   8*l1**2*l3**2*m1*m2*m3*p2**2*np.sin(2*(q1 - q3)) - 4*l1**2*l3**2*m2**2*m3*p2**2*np.sin(2*(q1 - q3)) -   4*l1**2*l3**2*m1*m3**2*p2**2*np.sin(2*(q1 - q3)) - 4*l1**2*l3**2*m2*m3**2*p2**2*np.sin(2*(q1 - q3)) -   2*l1**2*l2**2*m1*m2**2*p3**2*np.sin(2*(q1 - q3)) - 4*l1**2*l2**2*m1*m2*m3*p3**2*np.sin(2*(q1 - q3)) -   2*l1**2*l2**2*m1*m3**2*p3**2*np.sin(2*(q1 - q3)) + 2*g*l1**2*l2**2*l3**3*m1*m2**2*m3**2*np.sin(2*q1 - q3) +   2*g*l1**2*l2**2*l3**3*m1*m2*m3**3*np.sin(2*q1 - q3) - g*l1**2*l2**2*l3**3*m2**4*m3*np.sin(4*q1 - 4*q2 - q3) -   2*g*l1**2*l2**2*l3**3*m2**3*m3**2*np.sin(4*q1 - 4*q2 - q3) - g*l1**2*l2**2*l3**3*m2**2*m3**3*   np.sin(4*q1 - 4*q2 - q3) - 2*l1**2*l2*l3*m2**3*p2*p3*np.sin(4*q1 - 3*q2 - q3) -   4*l1**2*l2*l3*m2**2*m3*p2*p3*np.sin(4*q1 - 3*q2 - q3) - 2*l1**2*l2*l3*m2*m3**2*p2*p3*   np.sin(4*q1 - 3*q2 - q3) + 8*g*l1**2*l2**2*l3**3*m1*m2**3*m3*np.sin(2*q1 - 2*q2 - q3) +   4*g*l1**2*l2**2*l3**3*m2**4*m3*np.sin(2*q1 - 2*q2 - q3) + 12*g*l1**2*l2**2*l3**3*m1*m2**2*m3**2*   np.sin(2*q1 - 2*q2 - q3) + 8*g*l1**2*l2**2*l3**3*m2**3*m3**2*np.sin(2*q1 - 2*q2 - q3) +   4*g*l1**2*l2**2*l3**3*m1*m2*m3**3*np.sin(2*q1 - 2*q2 - q3) + 4*g*l1**2*l2**2*l3**3*m2**2*m3**3*   np.sin(2*q1 - 2*q2 - q3) + 2*l1*l2**2*l3*m2**3*p1*p3*np.sin(3*q1 - 2*q2 - q3) +   4*l1*l2**2*l3*m2**2*m3*p1*p3*np.sin(3*q1 - 2*q2 - q3) + 2*l1*l2**2*l3*m2*m3**2*p1*p3*   np.sin(3*q1 - 2*q2 - q3) + 12*l1**2*l2*l3*m1*m2**2*p2*p3*np.sin(2*q1 - q2 - q3) +   6*l1**2*l2*l3*m2**3*p2*p3*np.sin(2*q1 - q2 - q3) + 16*l1**2*l2*l3*m1*m2*m3*p2*p3*np.sin(2*q1 - q2 - q3) +   12*l1**2*l2*l3*m2**2*m3*p2*p3*np.sin(2*q1 - q2 - q3) + 4*l1**2*l2*l3*m1*m3**2*p2*p3*   np.sin(2*q1 - q2 - q3) + 6*l1**2*l2*l3*m2*m3**2*p2*p3*np.sin(2*q1 - q2 - q3) -   16*l1**2*l2*l3*m1**2*m2*p2*p3*np.sin(q2 - q3) - 16*l1**2*l2*l3*m1*m2**2*p2*p3*np.sin(q2 - q3) -   6*l1**2*l2*l3*m2**3*p2*p3*np.sin(q2 - q3) - 20*l1**2*l2*l3*m1**2*m3*p2*p3*np.sin(q2 - q3) -   26*l1**2*l2*l3*m1*m2*m3*p2*p3*np.sin(q2 - q3) - 12*l1**2*l2*l3*m2**2*m3*p2*p3*np.sin(q2 - q3) -   10*l1**2*l2*l3*m1*m3**2*p2*p3*np.sin(q2 - q3) - 6*l1**2*l2*l3*m2*m3**2*p2*p3*np.sin(q2 - q3) -   4*l2**2*l3**2*m2**2*m3*p1**2*np.sin(2*(q2 - q3)) - 4*l2**2*l3**2*m2*m3**2*p1**2*np.sin(2*(q2 - q3)) +   8*l1**2*l3**2*m1**2*m3*p2**2*np.sin(2*(q2 - q3)) + 8*l1**2*l3**2*m1*m2*m3*p2**2*np.sin(2*(q2 - q3)) +   2*l1**2*l3**2*m2**2*m3*p2**2*np.sin(2*(q2 - q3)) + 4*l1**2*l3**2*m1*m3**2*p2**2*np.sin(2*(q2 - q3)) +   2*l1**2*l3**2*m2*m3**2*p2**2*np.sin(2*(q2 - q3)) + 8*l1**2*l2**2*m1**2*m2*p3**2*np.sin(2*(q2 - q3)) +   4*l1**2*l2**2*m1*m2**2*p3**2*np.sin(2*(q2 - q3)) + 8*l1**2*l2**2*m1**2*m3*p3**2*np.sin(2*(q2 - q3)) +   8*l1**2*l2**2*m1*m2*m3*p3**2*np.sin(2*(q2 - q3)) + 4*l1**2*l2**2*m1*m3**2*p3**2*np.sin(2*(q2 - q3)) -   4*l1**2*l2*l3*m1**2*m3*p2*p3*np.sin(3*(q2 - q3)) - 2*l1**2*l2*l3*m1*m2*m3*p2*p3*np.sin(3*(q2 - q3)) -   2*l1**2*l2*l3*m1*m3**2*p2*p3*np.sin(3*(q2 - q3)) - 8*g*l1**2*l2**2*l3**3*m1**2*m2*m3**2*np.sin(2*q2 - q3) -   4*g*l1**2*l2**2*l3**3*m1*m2**2*m3**2*np.sin(2*q2 - q3) - 4*g*l1**2*l2**2*l3**3*m1**2*m3**3*np.sin(2*q2 - q3) -   4*g*l1**2*l2**2*l3**3*m1*m2*m3**3*np.sin(2*q2 - q3) + 16*g*l1**2*l2**2*l3**3*m1**2*m2**2*m3*np.sin(q3) +   16*g*l1**2*l2**2*l3**3*m1*m2**3*m3*np.sin(q3) + 6*g*l1**2*l2**2*l3**3*m2**4*m3*np.sin(q3) +   16*g*l1**2*l2**2*l3**3*m1**2*m2*m3**2*np.sin(q3) + 24*g*l1**2*l2**2*l3**3*m1*m2**2*m3**2*np.sin(q3) +   12*g*l1**2*l2**2*l3**3*m2**3*m3**2*np.sin(q3) + 6*g*l1**2*l2**2*l3**3*m1**2*m3**3*np.sin(q3) +   8*g*l1**2*l2**2*l3**3*m1*m2*m3**3*np.sin(q3) + 6*g*l1**2*l2**2*l3**3*m2**2*m3**3*np.sin(q3) -   2*g*l1**2*l2**2*l3**3*m1*m2**2*m3**2*np.sin(2*q1 - 4*q2 + q3) - 2*g*l1**2*l2**2*l3**3*m1*m2*m3**3*   np.sin(2*q1 - 4*q2 + q3) + 2*l1*l2**2*l3*m2**3*p1*p3*np.sin(3*q1 - 4*q2 + q3) +   4*l1*l2**2*l3*m2**2*m3*p1*p3*np.sin(3*q1 - 4*q2 + q3) + 2*l1*l2**2*l3*m2*m3**2*p1*p3*   np.sin(3*q1 - 4*q2 + q3) + g*l1**2*l2**2*l3**3*m2**4*m3*np.sin(4*q1 - 4*q2 + q3) +   2*g*l1**2*l2**2*l3**3*m2**3*m3**2*np.sin(4*q1 - 4*q2 + q3) + g*l1**2*l2**2*l3**3*m2**2*m3**3*   np.sin(4*q1 - 4*q2 + q3) - 4*l1**2*l2*l3*m1*m2**2*p2*p3*np.sin(2*q1 - 3*q2 + q3) -   2*l1**2*l2*l3*m2**3*p2*p3*np.sin(2*q1 - 3*q2 + q3) - 10*l1**2*l2*l3*m1*m2*m3*p2*p3*   np.sin(2*q1 - 3*q2 + q3) - 4*l1**2*l2*l3*m2**2*m3*p2*p3*np.sin(2*q1 - 3*q2 + q3) -   6*l1**2*l2*l3*m1*m3**2*p2*p3*np.sin(2*q1 - 3*q2 + q3) - 2*l1**2*l2*l3*m2*m3**2*p2*p3*   np.sin(2*q1 - 3*q2 + q3) - 8*l1*l2**2*l3*m1*m2**2*p1*p3*np.sin(q1 - 2*q2 + q3) -   6*l1*l2**2*l3*m2**3*p1*p3*np.sin(q1 - 2*q2 + q3) - 6*l1*l2**2*l3*m1*m2*m3*p1*p3*np.sin(q1 - 2*q2 + q3) -   12*l1*l2**2*l3*m2**2*m3*p1*p3*np.sin(q1 - 2*q2 + q3) + 2*l1*l2**2*l3*m1*m3**2*p1*p3*   np.sin(q1 - 2*q2 + q3) - 6*l1*l2**2*l3*m2*m3**2*p1*p3*np.sin(q1 - 2*q2 + q3) -   2*l2**2*l3**2*m2**2*m3*p1**2*np.sin(2*(q1 - 2*q2 + q3)) - 2*l2**2*l3**2*m2*m3**2*p1**2*   np.sin(2*(q1 - 2*q2 + q3)) + 2*l1**2*l2**2*m1*m2**2*p3**2*np.sin(2*(q1 - 2*q2 + q3)) +   4*l1**2*l2**2*m1*m2*m3*p3**2*np.sin(2*(q1 - 2*q2 + q3)) + 2*l1**2*l2**2*m1*m3**2*p3**2*   np.sin(2*(q1 - 2*q2 + q3)) - 8*g*l1**2*l2**2*l3**3*m1*m2**3*m3*np.sin(2*q1 - 2*q2 + q3) -   4*g*l1**2*l2**2*l3**3*m2**4*m3*np.sin(2*q1 - 2*q2 + q3) - 12*g*l1**2*l2**2*l3**3*m1*m2**2*m3**2*   np.sin(2*q1 - 2*q2 + q3) - 8*g*l1**2*l2**2*l3**3*m2**3*m3**2*np.sin(2*q1 - 2*q2 + q3) -   4*g*l1**2*l2**2*l3**3*m1*m2*m3**3*np.sin(2*q1 - 2*q2 + q3) - 4*g*l1**2*l2**2*l3**3*m2**2*m3**3*   np.sin(2*q1 - 2*q2 + q3) + 8*l1*l2*l3**2*m1*m2*m3*p1*p2*np.sin(q1 - 3*q2 + 2*q3) +   4*l1*l2*l3**2*m2**2*m3*p1*p2*np.sin(q1 - 3*q2 + 2*q3) + 4*l1*l2*l3**2*m1*m3**2*p1*p2*   np.sin(q1 - 3*q2 + 2*q3) + 4*l1*l2*l3**2*m2*m3**2*p1*p2*np.sin(q1 - 3*q2 + 2*q3) -   2*l1*l2**2*l3*m1*m2*m3*p1*p3*np.sin(q1 - 4*q2 + 3*q3) - 2*l1*l2**2*l3*m1*m3**2*p1*p3*   np.sin(q1 - 4*q2 + 3*q3) + 2*g*l1**2*l2**2*l3**3*m1*m2**2*m3**2*np.sin(2*q1 - 4*q2 + 3*q3) +   2*g*l1**2*l2**2*l3**3*m1*m2*m3**3*np.sin(2*q1 - 4*q2 + 3*q3) +   2*l1**2*l3**2*m2**2*m3*p2**2*np.sin(4*q1 - 2*(q2 + q3)) + 2*l1**2*l3**2*m2*m3**2*p2**2*   np.sin(4*q1 - 2*(q2 + q3)))/(4*l1**2*l2**2*l3**2*  (2*m1*m2 + m2**2 + m1*m3 + m2*m3 - m2*(m2 + m3)*np.cos(2*(q1 - q2)) - m1*m3*np.cos(2*(q2 - q3)))**2)
    return dq

def triple_d_p_H(q, p, t, lengths, masses, g):
    dp = np.zeros(3)
    (q1, q2, q3) = q
    (p1, p2, p3) = p
    l1, l2, l3 = lengths[0], lengths[1], lengths[2]
    m1, m2, m3 = masses[0], masses[1], masses[2]


    dp[0] = (-(l1*l3*(2*m2 + m3)*p2*np.cos(q1 - q2)) + l1*l3*m3*p2*np.cos(q1 + q2 - 2*q3) +   l2*(2*l3*m2*p1 + l3*m3*p1 - l1*(m2 + m3)*p3*np.cos(q1 - q3) - l3*m3*p1*np.cos(2*(q2 - q3)) +     l1*m2*p3*np.cos(q1 - 2*q2 + q3) + l1*m3*p3*np.cos(q1 - 2*q2 + q3)))/ (l1**2*l2*l3*(2*m1*m2 + m2**2 + m1*m3 + m2*m3 - m2*(m2 + m3)*np.cos(2*(q1 - q2)) -    m1*m3*np.cos(2*(q2 - q3))))
    dp[1] = (-(l2*l3*(2*m2 + m3)*p1*np.cos(q1 - q2)) + l2*l3*m3*p1*np.cos(q1 + q2 - 2*q3) +   l1*(2*l3*m1*p2 + 2*l3*m2*p2 + l3*m3*p2 - l3*m3*p2*np.cos(2*(q1 - q3)) +     l2*(m2 + m3)*p3*np.cos(2*q1 - q2 - q3) - 2*l2*m1*p3*np.cos(q2 - q3) - l2*m2*p3*np.cos(q2 - q3) -     l2*m3*p3*np.cos(q2 - q3)))/(l1*l2**2*l3*(2*m1*m2 + m2**2 + m1*m3 + m2*m3 -    m2*(m2 + m3)*np.cos(2*(q1 - q2)) - m1*m3*np.cos(2*(q2 - q3))))
    dp[2] = -((-2*l1*l2*m1*m2*p3 - l1*l2*m2**2*p3 - 2*l1*l2*m1*m3*p3 - 2*l1*l2*m2*m3*p3 - l1*l2*m3**2*p3 +    l1*l2*(m2 + m3)**2*p3*np.cos(2*(q1 - q2)) + l2*l3*m3*(m2 + m3)*p1*np.cos(q1 - q3) -    l1*l3*m2*m3*p2*np.cos(2*q1 - q2 - q3) - l1*l3*m3**2*p2*np.cos(2*q1 - q2 - q3) +    2*l1*l3*m1*m3*p2*np.cos(q2 - q3) + l1*l3*m2*m3*p2*np.cos(q2 - q3) + l1*l3*m3**2*p2*np.cos(q2 - q3) -    l2*l3*m2*m3*p1*np.cos(q1 - 2*q2 + q3) - l2*l3*m3**2*p1*np.cos(q1 - 2*q2 + q3))/  (l1*l2*l3**2*m3*(2*m1*m2 + m2**2 + m1*m3 + m2*m3 - m2*(m2 + m3)*np.cos(2*(q1 - q2)) -     m1*m3*np.cos(2*(q2 - q3)))))
    return dp

#### function for integrating, these calculate  F_i/m = a_i and returns [v_i, a_i] because of simplicity for multiplication in the function for integrating

def f_single( q, dot_q , t, lengths, masses, g):
	theta_1 = q[0]
	w1 = dot_q[0]      
	dw1 = -g/lengths[0] * np.sin(theta_1)
	return np.array([ w1]), np.array([ dw1]) 

def f_double( q, dot_q , t, lengths, masses, g):
    theta_1, theta_2 = q[0], q[1]
    w1, w2 = dot_q[0], dot_q[1]

    theta_12 = theta_1 - theta_2
    sin_1, sin_2 = (np.sin(theta_1), np.sin(theta_2))
    cos_1, cos_2 = (np.cos(theta_1), np.cos(theta_2))
    cos_12 = np.cos(theta_12)
    sin_12 = np.sin(theta_12)
    cos_21 = cos_12
    sin_21 = - sin_12

    dw1 = (-sin_12*(masses[1]*lengths[0]*w1**2 * cos_12 + masses[1]*lengths[1]*w2**2) - g*((masses[0]+masses[1])*sin_1 - masses[1]*sin_2 * cos_12))/(lengths[0]*(masses[0] + masses[1]* sin_12**2))
    dw2 = (sin_12 * ((masses[0]+masses[1])*lengths[0]*w1**2 + masses[1]*lengths[1]*w2**2 * cos_12) + g*((masses[0]+masses[1])*sin_1 * cos_12 - (masses[0]+masses[1])*sin_2))/(lengths[1]*(masses[0]+masses[1]*sin_12**2))   

    return np.array([ w1, w2]), np.array([dw1, dw2])

def f_triple(q, dot_q, t, lengths, masses, g):
	theta_1, theta_2, theta_3 = q[0], q[1], q[2]
	w1, w2, w3 = dot_q[0], dot_q[1], dot_q[2]

	theta_21 = theta_2 - theta_1
	theta_31 = theta_3 - theta_1
	theta_32 = theta_3 - theta_2

	cos_21, cos_31, cos_32 = (np.cos(theta_21), np.cos(theta_31), np.cos(theta_32))
	sin_21, sin_31, sin_32 = (np.sin(theta_21), np.sin(theta_31), np.sin(theta_32))
	sin_1, sin_2, sin_3 = (np.sin(theta_1), np.sin(theta_2), np.sin(theta_3))
	cos_1, cos_2, cos_3 = (np.cos(theta_1), np.cos(theta_2), np.cos(theta_3))

	dw1 = (masses[2]*(g*sin_3 + lengths[0]*w1**2*(cos_1*sin_3 - cos_3*sin_1) + lengths[1]*w2**2*(cos_2*sin_3 - cos_3*sin_2))*(cos_21*cos_32*masses[1] + cos_21*cos_32*masses[2] - cos_31*masses[1] - cos_31*masses[2]) - (cos_21*masses[1] + cos_21*masses[2] - cos_31*cos_32*masses[2])*(g*masses[1]*sin_2 + g*masses[2]*sin_2 + lengths[0]*masses[1]*w1**2*(cos_1*sin_2 - cos_2*sin_1) + lengths[0]*masses[2]*w1**2*(cos_1*sin_2 - cos_2*sin_1) - lengths[2]*masses[2]*w3**2*(cos_2*sin_3 - cos_3*sin_2)) + (-cos_32**2*masses[2] + masses[1] + masses[2])*(g*masses[0]*sin_1 + g*masses[1]*sin_1 + g*masses[2]*sin_1 - lengths[1]*masses[1]*w2**2*(cos_1*sin_2 - cos_2*sin_1) - lengths[1]*masses[2]*w2**2*(cos_1*sin_2 - cos_2*sin_1) - lengths[2]*masses[2]*w3**2*(cos_1*sin_3 - cos_3*sin_1)))/(lengths[0]*(cos_21**2*masses[1]**2 + 2*cos_21**2*masses[1]*masses[2] + cos_21**2*masses[2]**2 - 2*cos_21*cos_31*cos_32*masses[1]*masses[2] - 2*cos_21*cos_31*cos_32*masses[2]**2 + cos_31**2*masses[1]*masses[2] + cos_31**2*masses[2]**2 + cos_32**2*masses[0]*masses[2] + cos_32**2*masses[1]*masses[2] + cos_32**2*masses[2]**2 - masses[0]*masses[1] - masses[0]*masses[2] - masses[1]**2 - 2*masses[1]*masses[2] - masses[2]**2))

	dw2 = (-masses[2]*(g*sin_3 + lengths[0]*w1**2*(cos_1*sin_3 - cos_3*sin_1) + lengths[1]*w2**2*(cos_2*sin_3 - cos_3*sin_2))*(-cos_21*cos_31*masses[1] - cos_21*cos_31*masses[2] + cos_32*masses[0] + cos_32*masses[1] + cos_32*masses[2]) - (cos_21*masses[1] + cos_21*masses[2] - cos_31*cos_32*masses[2])*(g*masses[0]*sin_1 + g*masses[1]*sin_1 + g*masses[2]*sin_1 - lengths[1]*masses[1]*w2**2*(cos_1*sin_2 - cos_2*sin_1) - lengths[1]*masses[2]*w2**2*(cos_1*sin_2 - cos_2*sin_1) - lengths[2]*masses[2]*w3**2*(cos_1*sin_3 - cos_3*sin_1)) + (-cos_31**2*masses[2] + masses[0] + masses[1] + masses[2])*(g*masses[1]*sin_2 + g*masses[2]*sin_2 + lengths[0]*masses[1]*w1**2*(cos_1*sin_2 - cos_2*sin_1) + lengths[0]*masses[2]*w1**2*(cos_1*sin_2 - cos_2*sin_1) - lengths[2]*masses[2]*w3**2*(cos_2*sin_3 - cos_3*sin_2)))/(lengths[1]*(cos_21**2*masses[1]**2 + 2*cos_21**2*masses[1]*masses[2] + cos_21**2*masses[2]**2 - 2*cos_21*cos_31*cos_32*masses[1]*masses[2] - 2*cos_21*cos_31*cos_32*masses[2]**2 + cos_31**2*masses[1]*masses[2] + cos_31**2*masses[2]**2 + cos_32**2*masses[0]*masses[2] + cos_32**2*masses[1]*masses[2] + cos_32**2*masses[2]**2 - masses[0]*masses[1] - masses[0]*masses[2] - masses[1]**2 - 2*masses[1]*masses[2] - masses[2]**2))

	dw3 = ((g*sin_3 + lengths[0]*w1**2*(cos_1*sin_3 - cos_3*sin_1) + lengths[1]*w2**2*(cos_2*sin_3 - cos_3*sin_2))*(-cos_21**2*masses[1]**2 - 2*cos_21**2*masses[1]*masses[2] - cos_21**2*masses[2]**2 + masses[0]*masses[1] + masses[0]*masses[2] + masses[1]**2 + 2*masses[1]*masses[2] + masses[2]**2) + (cos_21*cos_32*masses[1] + cos_21*cos_32*masses[2] - cos_31*masses[1] - cos_31*masses[2])*(g*masses[0]*sin_1 + g*masses[1]*sin_1 + g*masses[2]*sin_1 - lengths[1]*masses[1]*w2**2*(cos_1*sin_2 - cos_2*sin_1) - lengths[1]*masses[2]*w2**2*(cos_1*sin_2 - cos_2*sin_1) - lengths[2]*masses[2]*w3**2*(cos_1*sin_3 - cos_3*sin_1)) - (-cos_21*cos_31*masses[1] - cos_21*cos_31*masses[2] + cos_32*masses[0] + cos_32*masses[1] + cos_32*masses[2])*(g*masses[1]*sin_2 + g*masses[2]*sin_2 + lengths[0]*masses[1]*w1**2*(cos_1*sin_2 - cos_2*sin_1) + lengths[0]*masses[2]*w1**2*(cos_1*sin_2 - cos_2*sin_1) - lengths[2]*masses[2]*w3**2*(cos_2*sin_3 - cos_3*sin_2)))/(lengths[2]*(cos_21**2*masses[1]**2 + 2*cos_21**2*masses[1]*masses[2] + cos_21**2*masses[2]**2 - 2*cos_21*cos_31*cos_32*masses[1]*masses[2] - 2*cos_21*cos_31*cos_32*masses[2]**2 + cos_31**2*masses[1]*masses[2] + cos_31**2*masses[2]**2 + cos_32**2*masses[0]*masses[2] + cos_32**2*masses[1]*masses[2] + cos_32**2*masses[2]**2 - masses[0]*masses[1] - masses[0]*masses[2] - masses[1]**2 - 2*masses[1]*masses[2] - masses[2]**2))
	return np.array([ w1, w2, w3]), np.array([dw1, dw2, dw3])


def Hamiltonian_single_Ek(q, p, t, lengths, masses, g):
    return p[0]**2/(2*masses[0]*lengths[0]**2)
def Hamiltonian_single_U(q, p, t, lengths, masses, g):
    return masses[0]*g*lengths[0]*(1-np.cos(q[0])) 
def Hamiltonian_single_Etot(q, p, t, lengths, masses, g):
    return Hamiltonian_single_Ek(q, p, t, lengths, masses, g) + Hamiltonian_single_U(q, p, t, lengths, masses, g)

def Hamiltonian_double_Ek(q, p, t, lengths, masses, g):
    return (masses[1]*lengths[1]*lengths[1]*p[0]*p[0] + (masses[0]+ masses[1])*lengths[0]*lengths[0]*p[1]*p[1] - 2*masses[1]*lengths[0]*lengths[1]*np.cos(q[0] - q[1])*p[0]*p[1])/(2*masses[1]*lengths[0]*lengths[0]*lengths[1]* lengths[1]*(masses[0] + masses[1] - masses[1]*np.cos(q[0] - q[1])*np.cos(q[0] - q[1])))
def Hamiltonian_double_U(q, p, t, lengths, masses, g):
    return -(masses[0] + masses[1])*g*lengths[0]*np.cos(q[0]) - masses[1]*g*lengths[1]*np.cos(q[1]) +  (g*(masses[0]*lengths[0] + masses[1]*(lengths[0] + lengths[1]))) 
def Hamiltonian_double_Etot(q, p, t, lengths, masses, g):
    return Hamiltonian_double_Ek(q, p, t, lengths, masses, g) + Hamiltonian_double_U(q, p, t, lengths, masses, g)

def Hamiltonian_triple_Ek(q, p, t, lengths, masses, g):
    return -((-2*lengths[1]**2*lengths[2]**2*masses[1]*masses[2]*p[0]**2 - lengths[1]**2*lengths[2]**2*masses[2]**2*p[0]**2 - 2*lengths[0]**2*lengths[2]**2*masses[0]*masses[2]*p[1]**2 - 2*lengths[0]**2*lengths[2]**2*masses[1]*masses[2]*p[1]**2 -    lengths[0]**2*lengths[2]**2*masses[2]**2*p[1]**2 - 2*lengths[0]**2*lengths[1]**2*masses[0]*masses[1]*p[2]**2 - lengths[0]**2*lengths[1]**2*masses[1]**2*p[2]**2 - 2*lengths[0]**2*lengths[1]**2*masses[0]*masses[2]*p[2]**2 -    2*lengths[0]**2*lengths[1]**2*masses[1]*masses[2]*p[2]**2 - lengths[0]**2*lengths[1]**2*masses[2]**2*p[2]**2 + 2*lengths[0]*lengths[1]*lengths[2]**2*masses[2]*(2*masses[1] + masses[2])*p[0]*p[1]*np.cos(q[0] - q[1]) +    lengths[0]**2*lengths[1]**2*(masses[1] + masses[2])**2*p[2]**2*np.cos(2*(q[0] - q[1])) - 2*lengths[0]*lengths[1]*lengths[2]**2*masses[2]**2*p[0]*p[1]*np.cos(q[0] + q[1] - 2*q[2]) +    2*lengths[0]*lengths[1]**2*lengths[2]*masses[1]*masses[2]*p[0]*p[2]*np.cos(q[0] - q[2]) + 2*lengths[0]*lengths[1]**2*lengths[2]*masses[2]**2*p[0]*p[2]*np.cos(q[0] - q[2]) +    lengths[0]**2*lengths[2]**2*masses[2]**2*p[1]**2*np.cos(2*(q[0] - q[2])) - 2*lengths[0]**2*lengths[1]*lengths[2]*masses[1]*masses[2]*p[1]*p[2]*np.cos(2*q[0] - q[1] - q[2]) -    2*lengths[0]**2*lengths[1]*lengths[2]*masses[2]**2*p[1]*p[2]*np.cos(2*q[0] - q[1] - q[2]) + 4*lengths[0]**2*lengths[1]*lengths[2]*masses[0]*masses[2]*p[1]*p[2]*np.cos(q[1] - q[2]) +    2*lengths[0]**2*lengths[1]*lengths[2]*masses[1]*masses[2]*p[1]*p[2]*np.cos(q[1] - q[2]) + 2*lengths[0]**2*lengths[1]*lengths[2]*masses[2]**2*p[1]*p[2]*np.cos(q[1] - q[2]) +    lengths[1]**2*lengths[2]**2*masses[2]**2*p[0]**2*np.cos(2*(q[1] - q[2])) - 2*lengths[0]*lengths[1]**2*lengths[2]*masses[1]*masses[2]*p[0]*p[2]*np.cos(q[0] - 2*q[1] + q[2]) -    2*lengths[0]*lengths[1]**2*lengths[2]*masses[2]**2*p[0]*p[2]*np.cos(q[0] - 2*q[1] + q[2]))/(lengths[0]**2*lengths[1]**2*lengths[2]**2*masses[2]*   (2*masses[0]*masses[1] + masses[1]**2 + masses[0]*masses[2] + masses[1]*masses[2] - masses[1]*(masses[1] + masses[2])*np.cos(2*(q[0] - q[1])) - masses[0]*masses[2]*np.cos(2*(q[1] - q[2])))))/2

def Hamiltonian_triple_U(q, p, t, lengths, masses, g):
    return -((masses[0] + masses[1] + masses[2])*g*lengths[0]*np.cos(q[0]) + (masses[1] + masses[2])*g*lengths[1]*np.cos(q[1]) + masses[2]*g*lengths[2]*np.cos(q[2])) +  (g*(masses[0]*lengths[0] + masses[1]*(lengths[0] + lengths[1]) + masses[2]*(lengths[0] + lengths[1] + lengths[2])))
def Hamiltonian_triple_Etot(q, p, t, lengths, masses, g):
    return Hamiltonian_triple_Ek(q, p, t, lengths, masses, g) + Hamiltonian_triple_U(q, p, t, lengths, masses, g)

def Hamiltonian_single_omegas(q, p,t, lengths, masses, g):
    omegas = np.zeros(1)
    omegas = p/(masses*lengths**2)
    return omegas
def Hamiltonian_double_omegas(q, p,t, lengths, masses, g):
    omegas = np.zeros(2)
    omegas[0] = (lengths[1]**2*masses[1]*p[0])/(lengths[0]**2*lengths[1]**2*masses[0]*masses[1] +     lengths[0]**2*lengths[1]**2*masses[1]**2 - lengths[0]**2*lengths[1]**2*masses[1]**2*     np.cos(q[0] - q[1])**2) -   (lengths[0]*lengths[1]*masses[1]*p[1]*np.cos(q[0] - q[1]))/   (lengths[0]**2*lengths[1]**2*masses[0]*masses[1] + lengths[0]**2*lengths[1]**2*masses[1]**2 -     lengths[0]**2*lengths[1]**2*masses[1]**2*np.cos(q[0] - q[1])**2) 
    omegas[1] =  (lengths[0]**2*(masses[0] + masses[1])*p[1])/(lengths[0]**2*lengths[1]**2*masses[0]*masses[1] +     lengths[0]**2*lengths[1]**2*masses[1]**2 - lengths[0]**2*lengths[1]**2*masses[1]**2*     np.cos(q[0] - q[1])**2) -   (lengths[0]*lengths[1]*masses[1]*p[0]*np.cos(q[0] - q[1]))/   (lengths[0]**2*lengths[1]**2*masses[0]*masses[1] + lengths[0]**2*lengths[1]**2*masses[1]**2 -     lengths[0]**2*lengths[1]**2*masses[1]**2*np.cos(q[0] - q[1])**2)
    return omegas

def Hamiltonian_triple_omegas(q, p,t, lengths, masses, g):
    omegas = np.zeros(3)
    omegas[0] = (-(lengths[0]*lengths[2]*(2*masses[1] + masses[2])*p[1]*np.cos(q[0] - q[1])) + lengths[0]*lengths[2]*masses[2]*p[1]*np.cos(q[0] + q[1] - 2*q[2]) +    lengths[1]*(2*lengths[2]*masses[1]*p[0] + lengths[2]*masses[2]*p[0] - lengths[0]*(masses[1] + masses[2])*p[2]*np.cos(q[0] - q[2]) - lengths[2]*masses[2]*p[0]*np.cos(2*(q[1] - q[2])) +      lengths[0]*masses[1]*p[2]*np.cos(q[0] - 2*q[1] + q[2]) + lengths[0]*masses[2]*p[2]*np.cos(q[0] - 2*q[1] + q[2])))/  (lengths[0]**2*lengths[1]*lengths[2]*(2*masses[0]*masses[1] + masses[1]**2 + masses[0]*masses[2] + masses[1]*masses[2] - masses[1]*(masses[1] + masses[2])*np.cos(2*(q[0] - q[1])) -     masses[0]*masses[2]*np.cos(2*(q[1] - q[2]))))

    omegas[1] = (-(lengths[1]*lengths[2]*(2*masses[1] + masses[2])*p[0]*np.cos(q[0] - q[1])) +    lengths[1]*lengths[2]*masses[2]*p[0]*np.cos(q[0] + q[1] - 2*q[2]) + lengths[0]*(2*lengths[2]*masses[0]*p[1] + 2*lengths[2]*masses[1]*p[1] + lengths[2]*masses[2]*p[1] -      lengths[2]*masses[2]*p[1]*np.cos(2*(q[0] - q[2])) + lengths[1]*(masses[1] + masses[2])*p[2]*np.cos(2*q[0] - q[1] - q[2]) - 2*lengths[1]*masses[0]*p[2]*np.cos(q[1] - q[2]) -      lengths[1]*masses[1]*p[2]*np.cos(q[1] - q[2]) - lengths[1]*masses[2]*p[2]*np.cos(q[1] - q[2])))/  (lengths[0]*lengths[1]**2*lengths[2]*(2*masses[0]*masses[1] + masses[1]**2 + masses[0]*masses[2] + masses[1]*masses[2] - masses[1]*(masses[1] + masses[2])*np.cos(2*(q[0] - q[1])) -     masses[0]*masses[2]*np.cos(2*(q[1] - q[2]))))
    omegas[2] = -((-2*lengths[0]*lengths[1]*masses[0]*masses[1]*p[2] - lengths[0]*lengths[1]*masses[1]**2*p[2] - 2*lengths[0]*lengths[1]*masses[0]*masses[2]*p[2] -     2*lengths[0]*lengths[1]*masses[1]*masses[2]*p[2] - lengths[0]*lengths[1]*masses[2]**2*p[2] + lengths[0]*lengths[1]*(masses[1] + masses[2])**2*p[2]*np.cos(2*(q[0] - q[1])) +     lengths[1]*lengths[2]*masses[2]*(masses[1] + masses[2])*p[0]*np.cos(q[0] - q[2]) - lengths[0]*lengths[2]*masses[1]*masses[2]*p[1]*np.cos(2*q[0] - q[1] - q[2]) -     lengths[0]*lengths[2]*masses[2]**2*p[1]*np.cos(2*q[0] - q[1] - q[2]) + 2*lengths[0]*lengths[2]*masses[0]*masses[2]*p[1]*np.cos(q[1] - q[2]) +     lengths[0]*lengths[2]*masses[1]*masses[2]*p[1]*np.cos(q[1] - q[2]) + lengths[0]*lengths[2]*masses[2]**2*p[1]*np.cos(q[1] - q[2]) - lengths[1]*lengths[2]*masses[1]*masses[2]*p[0]*np.cos(q[0] - 2*q[1] + q[2]) -     lengths[1]*lengths[2]*masses[2]**2*p[0]*np.cos(q[0] - 2*q[1] + q[2]))/(lengths[0]*lengths[1]*lengths[2]**2*masses[2]*(2*masses[0]*masses[1] + masses[1]**2 + masses[0]*masses[2] + masses[1]*masses[2] -      masses[1]*(masses[1] + masses[2])*np.cos(2*(q[0] - q[1])) - masses[0]*masses[2]*np.cos(2*(q[1] - q[2])))))
    return omegas

def Hamiltonian_single_p(q, omegas,t, lengths, masses, g):
    p = np.zeros(1)
    p = omegas*masses*lengths**2
    return p
def Hamiltonian_double_p(q, omegas,t, lengths, masses, g):
    p = np.zeros(2)
    p[0] = lengths[0]*lengths[1]*masses[1]*omegas[1]*np.cos(q[0] - q[1]) + lengths[0]**2 * omegas[0] * ( masses[0] + masses[1])
    p[1] = lengths[0]*lengths[1]*masses[1]*omegas[0]*np.cos(q[0] - q[1]) + lengths[1]**2*masses[1]*omegas[1]
    return p
def Hamiltonian_triple_p(q, omegas,t, lengths, masses, g):
    p = np.zeros(3)
    p[0] =lengths[0]**2*(masses[0] + masses[1] + masses[2])*omegas[0] + omegas[1]*(lengths[0]*lengths[1]*masses[1]*np.cos(q[0] - q[1]) + lengths[0]*lengths[1]*masses[2]*np.cos(q[0] - q[1])) +   lengths[0]*lengths[2]*masses[2]*omegas[2]*np.cos(q[0] - q[2])
    p[1] = lengths[1]**2*(masses[1] + masses[2])*omegas[1] +   omegas[0]*(lengths[0]*lengths[1]*masses[1]*np.cos(q[0] - q[1]) + lengths[0]*lengths[1]*masses[2]*np.cos(q[0] - q[1])) + lengths[1]*lengths[2]*masses[2]*omegas[2]*np.cos(q[1] - q[2])
    p[2] = lengths[2]**2*masses[2]*omegas[2] + lengths[0]*lengths[2]*masses[2]*omegas[0]*np.cos(q[0] - q[2]) + lengths[1]*lengths[2]*masses[2]*omegas[1]*np.cos(q[1] - q[2])
    return p
